<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress.com" created="2017-08-30 19:33"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Twissel&#039;s Hacking Projects</title>
	<link>https://twisselprojects.wordpress.com</link>
	<description>6 months of fun doing creative coding.</description>
	<pubDate>Wed, 30 Aug 2017 19:33:58 +0000</pubDate>
	<language></language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>https://twisselprojects.wordpress.com</wp:base_blog_url>

	<wp:author><wp:author_id>25985301</wp:author_id><wp:author_login><![CDATA[diegoeche]]></wp:author_login><wp:author_email><![CDATA[diegoeche@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[diegoeche]]></wp:author_display_name><wp:author_first_name><![CDATA[Diego]]></wp:author_first_name><wp:author_last_name><![CDATA[Echeverri]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
	<wp:tag><wp:term_id>14067</wp:term_id><wp:tag_slug>ai</wp:tag_slug><wp:tag_name><![CDATA[ai]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>418256</wp:term_id><wp:tag_slug>natural-language</wp:tag_slug><wp:tag_name><![CDATA[natural language]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>6704524</wp:term_id><wp:tag_slug>nltk</wp:tag_slug><wp:tag_name><![CDATA[nltk]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>832</wp:term_id><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[python]]></wp:tag_name>
</wp:tag>

	<generator>http://wordpress.com/</generator>
<image>
		<url>http://s2.wp.com/i/buttonw-com.png</url>
		<title>Twissel&#039;s Hacking Projects</title>
		<link>https://twisselprojects.wordpress.com</link>
	</image>
		
	<item>
		<title>About</title>
		<link>https://twisselprojects.wordpress.com/about/</link>
		<pubDate>Wed, 11 Nov 2015 14:50:09 +0000</pubDate>
		<dc:creator>diegoeche</dc:creator>
		<guid isPermaLink="false">http://twisselprojects.wordpress.com/?page_id=1</guid>
		<description></description>
		<content:encoded><![CDATA[This is an example of a page. Unlike posts, which are displayed on your blog’s front page in the order they’re published, pages are better suited for more timeless content that you want to be easily accessible, like your About or Contact information. Click the Edit link to make changes to this page or <a title="Direct link to Add New Page in your Dashboard" href="https://wordpress.com/page/102553015/new/">add another page</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date>2015-11-11 14:50:09</wp:post_date>
		<wp:post_date_gmt>2015-11-11 14:50:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Why Starting a Blog? Why Getting Away?</title>
		<link>https://twisselprojects.wordpress.com/2015/11/11/why-starting-a-blog-why-getting-away/</link>
		<pubDate>Wed, 11 Nov 2015 15:04:50 +0000</pubDate>
		<dc:creator>diegoeche</dc:creator>
		<guid isPermaLink="false">https://twisselprojects.wordpress.com/?p=2</guid>
		<description></description>
		<content:encoded><![CDATA[Hello.

My name is Diego. And I started studying computer science with high idealistic goals in my head. Creating robots, making true AI, cure hunger, destroy inequality. Create UTOPIA

Then, working after a long time in what could be the most fun projects you see machines prevalence in the modern world has not been what we expected. We have created what many of the sci-fi writers warned us about automation. A constant and infuriating pollution of our environment by advertisers that try to brainwash us into consumption of goods that have no real value.

Horrible things have been done in the name of "everybody else is doing it". You can't be a sheep. You should avoid it at all costs. Actually, Weizenbaum puts it perfectly:
<blockquote>“The salvation of the world depends only on the individual whose world it is. At least, every individual must act as if the whole future of the world, of humanity itself, depends on him. Anything less is a shirking of responsibility and is itself a dehumanizing force, for anything less encourages the individual to look upon himself as a mere actor in a drama written by anonymous agents, as less than a whole person, and that is the beginning of passivity and aimlessness.”
― <a href="https://www.goodreads.com/author/show/496834.Joseph_Weizenbaum">Joseph Weizenbaum</a></blockquote>
Well... I escaped 6 months to remember what computing is all about. I got tired of click-through rates. Abusing our mental bugs of irrationality. I want to rediscover what is fun about computers. How they help us understand ourselves and how they can be carriers of disruption for better times to come.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2015-11-11 15:04:50</wp:post_date>
		<wp:post_date_gmt>2015-11-11 15:04:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-starting-a-blog-why-getting-away</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16754706353]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>First Week of Arduino Fun</title>
		<link>https://twisselprojects.wordpress.com/2015/11/11/first-week-of-arduino-fun/</link>
		<pubDate>Wed, 11 Nov 2015 15:24:45 +0000</pubDate>
		<dc:creator>diegoeche</dc:creator>
		<guid isPermaLink="false">https://twisselprojects.wordpress.com/?p=5</guid>
		<description></description>
		<content:encoded><![CDATA[So I remember my love for Electronics when I started my university.

The problem of hardware is having stupid and idiotic hands. Burning stuff. Buying things... or is that actually the fun? :D

Things have changed a lot from my PIC programming lessons in my Uni. Lot of Amateur friendly hardware is out there, and is not only cheap. Is rather modular!

So I got <a href="http://www.amazon.de/Anf%C3%A4ngerset-UNO-f%C3%BCr-Arduino-Mikrocontroller/dp/B00CR1FAS2/ref=sr_1_1?ie=UTF8&amp;qid=1447254589&amp;sr=8-1&amp;keywords=funduino+uno+1">a simple kit</a> to remember even the polarity of a LED. And it has been lot's of fun!

I started with a simple 2 bit counter operated by a single button. Then motivation got me to even make a <a href="https://www.instagram.com/p/9n-vExM2Kp/">cool ultrasonic distance measurer</a>. And since I got already all that working. Why not bragging of the beautiful weather in Medellin by creating a simple serial-connected sensor to my laptop and making a nice plot to prove it?

First, get a cheap temperature sensor like <a href="https://www.sparkfun.com/products/10988">this one</a>.

Second. <a href="https://gist.github.com/diegoeche/3c63b2fa93a2f8ec4d98">Create a simple snippet of code</a> and load it into the Arduino to measure the temperature. I average 10 consecutive measurements to avoid too much noise:

The Arduino will start writing to the serial port the temperature in Celcius. You only need to read the value and plot it against time. <a href="https://gist.github.com/diegoeche/24fe5d3ef5d95484d511">I used a simple ruby script like the following to do so</a>.

A couple of hours of sensing shows that I'm happy not to endure winter in Berlin this time :D

<img class="alignnone  wp-image-6" src="https://twisselprojects.files.wordpress.com/2015/11/temperature.jpg?w=300" alt="temperature" width="597" height="360" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date>2015-11-11 15:24:45</wp:post_date>
		<wp:post_date_gmt>2015-11-11 15:24:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>first-week-of-arduino-fun</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16755231645]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>temperature</title>
		<link>https://twisselprojects.wordpress.com/2015/11/11/first-week-of-arduino-fun/temperature/</link>
		<pubDate>Wed, 11 Nov 2015 15:24:16 +0000</pubDate>
		<dc:creator>diegoeche</dc:creator>
		<guid isPermaLink="false">http://twisselprojects.files.wordpress.com/2015/11/temperature.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2015-11-11 15:24:16</wp:post_date>
		<wp:post_date_gmt>2015-11-11 15:24:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>temperature</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>5</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://twisselprojects.files.wordpress.com/2015/11/temperature.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/9e6/102553015/files/2015/11/temperature.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:541;s:6:"height";i:326;s:4:"file";s:88:"/home/wpcom/public_html/wp-content/blogs.dir/9e6/102553015/files/2015/11/temperature.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My Kingdom for a Good GameDev Stack</title>
		<link>https://twisselprojects.wordpress.com/2015/11/20/my-kingdom-for-a-good-gamedev-stack/</link>
		<pubDate>Fri, 20 Nov 2015 20:45:48 +0000</pubDate>
		<dc:creator>diegoeche</dc:creator>
		<guid isPermaLink="false">https://twisselprojects.wordpress.com/?p=9</guid>
		<description></description>
		<content:encoded><![CDATA[I really just wanted an easy-to-use 2d game engine for multi-platform (mobile) development. But then this happened.
<h3>An Open Source Replacement for Unity, or
Why Volunteering to Walk to Mordor?</h3>
Saying "I have used Unity" is a sad way to start explaining why I decided to check the status of the open source game engines and media libraries.

Basically my experience with Unity was a good reminder of why I love OpenSource. The pile of hacks inside Unity and the legalese when you just want to have fun making games is overwhelming. And the best thing? I am the one complaining having not much experience in Game-Development.

Maybe that's the issue. Ruby creates unsatisfiable expectations regarding maturity and usability of software. If the tooling around the ecosystem doesn't let me try stuff easily, then I lose all my motivation. And in tooling I expect up-to-date documentation. My quest for finding a replacement for Unity was harder than I thought.
<h3>History of Making Computer Games</h3>
At some point in time, people got tired of punching cards and decided to have a translation mechanism between programs and hardware. The idea behind this was the usual. We don't like working and that particular task was rather cumbersome. We got tired of it and invented the C programming language. Portability was invented.

Later some dudes figured out that it was rather neat to share the code so we (the coders again) wouldn't have to work so fucking much. We started sharing code in magazines and copper wires. Open Source was born.

The GameDev community ignored the progress. They had romanticized too much Carmack doing all his titles with a Butter-knife, 2 clips and a magnet. They simply couldn't go back.

The era of mobile development arrives. That and the time of heavily lobbied politics. Wanna have multi-device development? You'll have to make generics work at compile time, or make garbage collection more predictable.

Worse, platforms launch so fast, and accumulate so much hideous legacy and deprecated stuff that you will carry on, silently, in the name of "backwards compatibility".

Easier to find the reset button.
<h3>What do you want? What did you find?</h3>
Stopping my Rant. I guess the open source game engine world looks like the <a href="https://xkcd.com/927/">xkcd's standards comic</a>.

I still want to make games. Even if I'll have to develop Stockholm syndrome to get to enjoy it. Which platform is the least bad? Well... I've been looking into different platforms for almost ~4 months. Started playing with plain Rust and SFML to make a simple RPG but I felt the type-system was getting on my way to get stuff done. Maybe I don't need too many correctness guarantees.

So on addition to being OpenSource, 2D I wanted it to be "performant enough" and "high level". I felt the conclusions from <a href="http://blog.prime31.com/the-great-2d-game-engine-evaluation/">this blog</a> hit close to home. Since I couldn't spend all my life testing all my options decided to limit myself to checkout MonoGame, LibGDX and HaXe.
<h3>LibGDX</h3>
"Well... Maybe I'm desperate enough to use Java". I guess that's what most people thinks when deciding to use LibGDX. And you can use Scala... if you pray to the right gods.

Do I really want to use Java?

Better documentation about how to use LibGDX with alternative setups would be awesome. Maybe Scala does work now. But the level of abstraction still feels too high. Documentation is too dependent on your development environment. Emacs user downer.
<h3>Monogame</h3>
My first thought was "Awesome! they made Bastion using this platform!" Then you see "A port of the old XNA" is not a metaphor.

Monogame has great language support, but a horrible development environment support. Their license plans and documentation feel outdated. The tooling changes too much and too often. Getting it to work required looking into what seemed purposely hidden documentation to force you to pay for licenses.

Being fair, I think the traumas of a badly implemented AOT with Unity got me biased
<h3>The Winner</h3>
I really like this made-up language called HaXe.

Who would have thought?
<ul>
	<li>Binaries aren't huge.</li>
	<li>The language is statically typed with "Dynamic" types.</li>
	<li>The api might be ugly, but easy to get familiar with.</li>
	<li>Code examples are extensive.</li>
	<li>Prototyping cheap (either through Html5, Flash or Neko support)</li>
</ul>
I might regret on a later point. So far, I built a simple game with it and a very tiny backend in Elixir. I really enjoyed it.

<a href="https://github.com/diegoeche/break-kraut">Frontend</a> <a href="https://github.com/diegoeche/break-kraut.backend">Backend</a> <a href="https://fast-everglades-7042.herokuapp.com/">Deploy</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2015-11-20 20:45:48</wp:post_date>
		<wp:post_date_gmt>2015-11-20 20:45:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-kingdom-for-a-good-gamedev-stack</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_a1b5bc016cf94e9b13e755936738e9f2</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6f491bee86645a643bbb147903d36011</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[17051621254]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[86Halley]]></wp:comment_author>
			<wp:comment_author_email>kieransteele@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>https://2006Charissa.blogspot.se</wp:comment_author_url>
			<wp:comment_author_IP>2.93.134.117</wp:comment_author_IP>
			<wp:comment_date>2017-08-26 07:12:57</wp:comment_date>
			<wp:comment_date_gmt>2017-08-26 07:12:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I see you don't monetize your site, don't 
waste your traffic, you can earn additional bucks every month because 
you've got high quality content. If you want to know how to make 
extra money, search for: best adsense alternative 
Wrastain's tools]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1503731577.09010791778564453125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:11:{s:14:"comment_author";s:8:"86Halley";s:20:"comment_author_email";s:22:"kieransteele@yahoo.com";s:18:"comment_author_url";s:32:"https://2006Charissa.blogspot.se";s:15:"comment_content";s:251:"I see you don't monetize your site, don't 
waste your traffic, you can earn additional bucks every month because 
you've got high quality content. If you want to know how to make 
extra money, search for: best adsense alternative 
Wrastain's tools";s:12:"comment_type";s:0:"";s:7:"user_ip";s:12:"2.93.134.117";s:10:"user_agent";s:82:"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0";s:4:"blog";s:36:"http://twisselprojects.wordpress.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:85:"https://twisselprojects.wordpress.com/2015/11/20/my-kingdom-for-a-good-gamedev-stack/";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1503735222.4887421131134033203125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Monitoring for Drones</title>
		<link>https://twisselprojects.wordpress.com/2015/12/01/monitoring-for-drones/</link>
		<pubDate>Tue, 01 Dec 2015 01:24:41 +0000</pubDate>
		<dc:creator>diegoeche</dc:creator>
		<guid isPermaLink="false">https://twisselprojects.wordpress.com/?p=179</guid>
		<description></description>
		<content:encoded><![CDATA[Some days ago I met the people from <a href="https://twitter.com/goraspace">Göra Makerspace</a>. Among many interesting projects that mix Art and Engineering these guys are trying to build their own Auto-Pilot System inspired by <a href="http://ardupilot.com/">ArduPilot</a>.

There's still a lot of work to be done but they asked me about ways to record and chart their sensor data in order to be able to fine-tune all the rocket-science math behind autonomous flight.
<h2>Reinventing The Wheel</h2>
Currently  the team developed their own protocol for metrics which is using bluetooth for transmission of the stat. A Custom made android app reads the bluetooth information and renders it as it comes.

This falls on the typical drawbacks of using a handcrafted system for a well known problem. <em>Not Flexible Enough &amp; Not Battle-Tested. </em>But more importantly, it distracts you from your real problem!

Because let's be honest. Autonomous flight is a hard problem on itself, the less things you have to worry about the more focus you can put on the interesting challenges.

Welcome to a 20 minute monitoring setup for Drones.
<h2>Robotics ala DevOps</h2>
What you can't measure can't improve. And well... backends do generate tons of metrics. It's not too crazy to ask yourself: Could I reuse the tools I normally use in Backends for monitoring Robot Sensing Data?

Let's try it!
<h4>StatsD</h4>
Let's start with choosing a Protocol to send the metrics.
<ul>
	<li>We want to reduce usage of CPU, Memory and Bandwidth.</li>
	<li>Sending metrics should be cheap and fast.</li>
	<li>Something <em>standard</em> should save us time later.</li>
</ul>
Well. Meet <a href="https://github.com/etsy/statsd">StatsD</a> A simple UDP/based protocol (and metric aggregator daemon).

Being UDP means "fire-and-forget" semantics. This avoids IO.blocking time but also avoids breaking the whole system in case of a momentary network split. If we lose a single metric (due to packet loss) the sensing redundancy will take care of the issue.
<h4>Graphite + Carbon</h4>
We want to save and display all these metrics somehow. One solution is <a href="http://graphite.readthedocs.org/en/latest/">Graphite</a> which I really like because you can transform the time-series data arbitrarily with simple mathematical functions. The exploration of metrics is easy and you can build custom Dashboards.
<h2>Setup</h2>
Before installing each of the aforementioned packages and figure out how to configure each of them. I welcome you to the future. All the packages above are trivial to run together using containers. Just install <a href="https://www.docker.com/">Docker</a> and follow <a href="https://github.com/hopsoft/docker-graphite-statsd">this guide</a>. in 15 minutes you'll have all the required infrastructure.
<h4>Sending the Data to the Aggregator</h4>
Right now, all the sensing and controller code is being done in Python. In order to make the robot send the data to the aggregator we <a href="https://gist.github.com/38f0c92902a99c4eaf41">can use a UDP socket.</a> Or even better <a href="https://github.com/gaelenh/python-statsd-client">a Python StatsD Client</a>.

With the simple script you can simulate the first sensing data. In this case we simulate the x,y,z sensing data from a fake gyroscope. Notice how the namespace-looking metrics improves the readability of what could be a bunch of meaningless numbers.

<img class=" size-full wp-image-288 aligncenter" src="https://twisselprojects.files.wordpress.com/2015/12/screen-shot-2015-11-30-at-20-43-09.png" alt="Screen Shot 2015-11-30 at 20.43.09" width="400" height="243" />
<h2>Conclusion</h2>
StatsD + Graphite + Carbon + Docker + UDP = Simple Robot monitoring Setup]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date>2015-12-01 01:24:41</wp:post_date>
		<wp:post_date_gmt>2015-12-01 01:24:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>monitoring-for-drones</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[17352250887]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2015-11-30 at 18.25.45</title>
		<link>https://twisselprojects.wordpress.com/2015/12/01/monitoring-for-drones/screen-shot-2015-11-30-at-18-25-45/</link>
		<pubDate>Tue, 01 Dec 2015 01:18:15 +0000</pubDate>
		<dc:creator>diegoeche</dc:creator>
		<guid isPermaLink="false">http://twisselprojects.files.wordpress.com/2015/12/screen-shot-2015-11-30-at-18-25-45.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>271</wp:post_id>
		<wp:post_date>2015-12-01 01:18:15</wp:post_date>
		<wp:post_date_gmt>2015-12-01 01:18:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2015-11-30-at-18-25-45</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>179</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://twisselprojects.files.wordpress.com/2015/12/screen-shot-2015-11-30-at-18-25-45.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/9e6/102553015/files/2015/12/screen-shot-2015-11-30-at-18-25-45.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1417;s:6:"height";i:341;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/9e6/102553015/files/2015/12/screen-shot-2015-11-30-at-18-25-45.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2015-11-30 at 20.43.09</title>
		<link>https://twisselprojects.wordpress.com/2015/12/01/monitoring-for-drones/screen-shot-2015-11-30-at-20-43-09/</link>
		<pubDate>Tue, 01 Dec 2015 01:43:31 +0000</pubDate>
		<dc:creator>diegoeche</dc:creator>
		<guid isPermaLink="false">http://twisselprojects.files.wordpress.com/2015/12/screen-shot-2015-11-30-at-20-43-09.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>288</wp:post_id>
		<wp:post_date>2015-12-01 01:43:31</wp:post_date>
		<wp:post_date_gmt>2015-12-01 01:43:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2015-11-30-at-20-43-09</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>179</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://twisselprojects.files.wordpress.com/2015/12/screen-shot-2015-11-30-at-20-43-09.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/9e6/102553015/files/2015/12/screen-shot-2015-11-30-at-20-43-09.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:243;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/9e6/102553015/files/2015/12/screen-shot-2015-11-30-at-20-43-09.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Simple Text Classification with Python&#039;s NLTK</title>
		<link>https://twisselprojects.wordpress.com/2015/12/21/simple-text-classification-with-pythons-nltk/</link>
		<pubDate>Mon, 21 Dec 2015 21:51:28 +0000</pubDate>
		<dc:creator>diegoeche</dc:creator>
		<guid isPermaLink="false">https://twisselprojects.wordpress.com/?p=290</guid>
		<description></description>
		<content:encoded><![CDATA[Last Tuesday I had a very interesting talk with the CTO's and Engineering leads of the SocialAtom Ventures. The idea was to talk about the current challenges everybody is facing and share the experiences we've had with similar problems. One of the companies (<a href="http://www.bankity.com/">Bankity</a>) is struggling to separate bogus messages from their transaction messages. This is currently being done through Google's Prediction API which not only makes them dependent on a vendor, but also is a black-box that is hard to reason about.

Early startups tend to be very wary regarding topics that sound too much like Rocket Science. There is of course some appeal to avoid complexity when your startup is on an early stage. Machine learning is one of those topics everybody feels intimidated about. In this post I'll try to convince you that is fine to experiment. And the results/effort might surprise you.
<h2>Disclaimer</h2>
This is actually the first time I do text classification. I'm  happy with the current results and I've learned a lot. I felt this post could motivate some people to experiment with NLTK. I'm not an authority on the topic.
<h2>Text Classification Basics</h2>
Classification problems are those that try to find the most suitable category for a given object. An example you are probably familiar with is your e-mail spam detector. The classification algorithm behind it is able to classify the email (objects) into the "spam" or "ham" categories.

In order to do the classification, a subset of characteristics (features) from the text is selected. These "features" are the high-level inputs that our classifier will receive.
<h2>Getting Started With Python NLTK</h2>
<a href="http://www.nltk.org/">NLTK</a> stands for "Natural Language Toolkit". Installing it in your environment using <strong>pip</strong> is as simple as:

<code>$ pip install nltk
</code>

Once this is done, we can start preparing our data to train our first classifier. I got all my data as a spreadsheet that I saved in CSV with the following format:

<code>// CSV FILE EXAMPLE
message,isTransaction
"Transaction Approved, $15.700, Hora 03:40, Comercio PAYU NETFLIX COM",1
"I called you 20/10 el **693 at 10:11.",0
"You received 2 calls from: *198 at 20/10/15 This is a free service of Claro.",0
// [...]
</code>

Parsing de data in Python is very easy using the csv library.

[code language="python"]
# A function to tokenize the input into words.
def tokenize(element):
 # tokens = nltk.tokenize_words(transactions[0])
 # return nltk.word_tokenize(element)
 return split(&quot;\W+&quot;, element)

def load_dataset():
 transactions = []
 other = []
 all_words = []
 with open('dataset2.csv') as csvfile:
   reader = csv.DictReader(csvfile)
   for row in reader:
     words = tokenize(row[&quot;message&quot;])
     all_words.extend(words)
     if(row[&quot;isTransaction&quot;] == &quot;1&quot;):
       transactions.append(words)
     else:
       other.append(words)
 return(transactions, other, all_words)

transactions, other, all_words = load_dataset()
[/code]

NL often requires that you do some simple pre-processing of the input. Although I used a simple regex for tokenizing the input into words, nltk comes with its own tokenizer (as shown in the tokenizer function from the snippet).
<h2>Training our first classifier</h2>
The text-book example on text classification uses <a href="https://en.wikipedia.org/wiki/Bayes_classifier">Bayes</a> to create a probability model that will use the frequency of occurrences in order to create a statistical model to infer the class of a given object. The "features" in this case correspond to the presence of a given word in the document.
<h4>A note on dimensionality</h4>
Each feature creates a "dimension" the classifier will have to deal with. The more dimensions the machine learning algorithm has, the more processing power it will require for analysing and training. Some features do not provide significant information, so it's often useful to spend some time looking at the features gathered from the documents processed and see their histogram of occurrences.

[code language="python"]
frequencies = nltk.FreqDist(w.lower() for w in all_words)
print(frequencies.most_common(50))
[/code]

Intuitively, features that are too rare (words that happen only once in the entire dataset) do not provide general information. Features that might be too common (stop words as in 'the', 'a', etc) are too broad to be used in classification decisions. Dimensionality Reduction (or in lay terms, selecting the best and most meaningful features) can make your algorithm converge faster.
<h2>Naive Bayes Classifier</h2>
Once you have your dataset ready, is time to train your model. Split your dataset into "training" and "test". T<a href="http://stackoverflow.com/questions/13610074/is-there-a-rule-of-thumb-for-how-to-divide-a-dataset-into-training-and-validatio/13623707#13623707">his article of StackOverflow</a> provides some good practices handling your dataset.

[code language="python"]
# Convert from frequencies to 'contains word' feature
def document_features(words, word_features):
 document_words = set(words)
 features = {}
 for word in word_features:
 features[word] = (word in document_words)
 return features

# Label all the dataset
transaction_features = [(document_features(t, word_features), 'transaction') for t in transactions]
other_features = [(document_features(o, word_features), 'other') for o in other]

# Select all the feature tests.
feature_sets = transaction_features + other_features

# Shuffle the dataset per test
random.shuffle(feature_sets)

# In our case we use 1000 items for training, 100 for testing.
train_set, test_set = feature_sets[:1000], feature_sets[100:]

real_labels = [label for (_,label) in test_set]
predictions = classifier.classify_many(x for (x,_) in test_set)
valid_predictions = [label == prediction for (label, prediction) in zip(real_labels, predictions)]

accuracy = valid_predictions.count(True) / float(len(valid_predictions))
[/code]

That's it. We are measuring the <strong>Avg-Error</strong> in this case as a simple benchmark of convergence of the algorithm. After running the algorithm a couple of thousands of times and playing with the parameters I got to an ~84.3% Avg-Error. I noticed that the convergence rate did not change dramatically by using the top 300 features of the dataset.
<h2>Trying other Classifiers</h2>
If the Bayes classifier didn't work, <a href="http://www.nltk.org/howto/classify.html">there are more classifiers available in NLTK.</a>. In my case the ~84.3% from Bayes wasn't enough. NLTK's classifiers conform to the same interface. Because of this, running the same test-program and checking different classifiers to see which performs better is super easy!

[code language="python"]
classifier = nltk.classify.DecisionTreeClassifier.train(train_set,entropy_cutoff=0,support_cutoff=0)
[/code]

In my case, the DecisionTreeClassifier, was the most performant. Using only 1000 examples for training and 100 test objects, it was easy to reach a ~97% accuracy.
<h2>Conclusions</h2>
NLTK is a very simple library for Natural Language processing in Python. It takes a couple of hundred of lines to check several classifiers and determine which one works best for your dataset. Tuning the features of your given problem might improve the processing costs of the algorithm or even improve the convergence rate.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date>2015-12-21 21:51:28</wp:post_date>
		<wp:post_date_gmt>2015-12-21 21:51:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>simple-text-classification-with-pythons-nltk</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ai"><![CDATA[ai]]></category>
		<category domain="post_tag" nicename="natural-language"><![CDATA[natural language]]></category>
		<category domain="post_tag" nicename="nltk"><![CDATA[nltk]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25985301]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Poor Man&#039;s Web Automation Using Chrome Extensions</title>
		<link>https://twisselprojects.wordpress.com/2016/01/07/poor-mans-web-automation-using-chrome-extensions/</link>
		<pubDate>Thu, 07 Jan 2016 21:24:54 +0000</pubDate>
		<dc:creator>diegoeche</dc:creator>
		<guid isPermaLink="false">https://twisselprojects.wordpress.com/?p=335</guid>
		<description></description>
		<content:encoded><![CDATA[So let's say you are trying to integrate with one of those third parties which their entire business relies on making it hard for you to access the information they publish. For example, let's say you are trying to keep a database of interesting public profiles from <a href="https://www.linkedin.com/">LinkedIn</a>, and you are interested only in a couple of indicators from each profile. How can we automate the gathering of this information?

One possibility would be to use something like <a href="https://github.com/sparklemotion/mechanize">Mechanize</a>. A headless browser plus a script to login (and create the specific session state that authentication requires) and then write some code to crawl the DOM and collect the information you need.

If you are afraid of end-users getting confused with the script. Maybe login is already too hard and we want people to use their browser's state for authenticating. Then a simple Chrome Extension might be enough for your automation tasks.
<h2>Getting Started with Chrome Extensions</h2>
I wrote an extension for the specific purpose of extracting certain pieces of information from the LinkedIn profiles. Getting started with it is rather easy and you can just go ahead and <a href="https://github.com/diegoeche/ExtensionCrawlerExample">clone the repository.</a>
<h3>The Manifest</h3>
First thing you have to do to configure your extension is to create a manifest file. In this file the extension declares what kind of permissions it will require. It also lists the resource files the extension will use.

[code language="javascript"]
{
&quot;manifest_version&quot;: 2,

&quot;name&quot;: &quot;Scrapping tool for Linkedin&quot;,
&quot;description&quot;: &quot;description&quot;,
&quot;version&quot;: &quot;1.0&quot;,

&quot;browser_action&quot;: {
&quot;default_icon&quot;: &quot;icon.png&quot;,
&quot;default_popup&quot;: &quot;popup.html&quot;
},

&quot;content_scripts&quot;: [{
&quot;matches&quot;: [&quot;*://*.linkedin.com/*&quot;],
&quot;js&quot;: [&quot;content.js&quot;]
}],

&quot;permissions&quot;: [
&quot;activeTab&quot;
]
}
[/code]

In our example we need the "activeTab" permission in order to be able to access the tab contents. Additionally we have declared 2 types of resources. We added a <em>content.js</em> to the <em>content_scripts </em>folder and we have a <em>popup.html</em>.
<h3>Popup</h3>
The type of extension we are developing is <a href="https://developer.chrome.com/extensions/browserAction">the one that will have a simple button in chrome's omnibar</a>. When clicking it, the file attached to the extension (<em>popup.html</em>) will be rendered.
<h3>Getting the tab html</h3>
Having behaviour on clicking the button is not enough. The popup has no access to the contents of the tab we are interested to crawl. How do we communicate with the open tab to get access to its DOM? <a href="https://developer.chrome.com/extensions/messaging">Chrome uses message passing</a> to communicate between different "contexts". The file we added previously in the "content" section of the manifest will run in the same context of the website. Making the activeTab return its markup can be achieved by writing something like:

[code language="javascript"]
// Listen for messages
chrome.runtime.onMessage.addListener(function (msg, sender, sendResponse) {
  // If the received message has the expected format...
  sendResponse(document.all[0].outerHTML);
});
[/code]

We can then create an asynchronous helper function to process the results of the html returned by the DOM.

[code language="javascript"]
function getInnerHtml(callback) {
  var queryInfo = {
    active: true,
    currentWindow: true
  };

  chrome.tabs.query(queryInfo, function(tabs) {
    var tab = tabs[0];
    chrome.tabs.sendMessage(tab.id, {greeting: &amp;amp;quot;message&amp;amp;quot;}, function(response) {
      callback(response);
    });
  });
}
[/code]
<h3>Testing The Extension</h3>
Save everything under the same folder just like you'd find it on <a href="https://github.com/diegoeche/ExtensionCrawlerExample">my github repository</a>. Then open Chrome and go to "chrome://extensions/" There, make sure to have "developer mode" enabled and then just select "Load Unpacked Extension". Which would add a small icon in your Omnibar. Clicking the icon will run what is in <em>popup.html</em> and its javascript resources. The <em>html</em> that is displayed after clicking the button is accessible to the developer console of Chrome which makes it easy to debug.

<img class="alignnone  wp-image-338" src="https://twisselprojects.files.wordpress.com/2016/01/resized.png?w=300" alt="resized" width="631" height="248" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date>2016-01-07 21:24:54</wp:post_date>
		<wp:post_date_gmt>2016-01-07 21:24:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>poor-mans-web-automation-using-chrome-extensions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25985301]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[18519669801]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2016-01-07 at 16.13.48</title>
		<link>https://twisselprojects.wordpress.com/2016/01/07/poor-mans-web-automation-using-chrome-extensions/screen-shot-2016-01-07-at-16-13-48/</link>
		<pubDate>Thu, 07 Jan 2016 21:15:05 +0000</pubDate>
		<dc:creator>diegoeche</dc:creator>
		<guid isPermaLink="false">http://twisselprojects.files.wordpress.com/2016/01/screen-shot-2016-01-07-at-16-13-48.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>337</wp:post_id>
		<wp:post_date>2016-01-07 21:15:05</wp:post_date>
		<wp:post_date_gmt>2016-01-07 21:15:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2016-01-07-at-16-13-48</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>335</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://twisselprojects.files.wordpress.com/2016/01/screen-shot-2016-01-07-at-16-13-48.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/9e6/102553015/files/2016/01/screen-shot-2016-01-07-at-16-13-48.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1310;s:6:"height";i:515;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/9e6/102553015/files/2016/01/screen-shot-2016-01-07-at-16-13-48.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>resized</title>
		<link>https://twisselprojects.wordpress.com/2016/01/07/poor-mans-web-automation-using-chrome-extensions/resized/</link>
		<pubDate>Thu, 07 Jan 2016 21:16:52 +0000</pubDate>
		<dc:creator>diegoeche</dc:creator>
		<guid isPermaLink="false">http://twisselprojects.files.wordpress.com/2016/01/resized.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>338</wp:post_id>
		<wp:post_date>2016-01-07 21:16:52</wp:post_date>
		<wp:post_date_gmt>2016-01-07 21:16:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>resized</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>335</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://twisselprojects.files.wordpress.com/2016/01/resized.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/9e6/102553015/files/2016/01/resized.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:655;s:6:"height";i:258;s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/9e6/102553015/files/2016/01/resized.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Starting Game Development in C++</title>
		<link>https://twisselprojects.wordpress.com/2017/02/01/starting-game-development-in-c/</link>
		<pubDate>Wed, 01 Feb 2017 01:30:37 +0000</pubDate>
		<dc:creator>diegoeche</dc:creator>
		<guid isPermaLink="false">https://twisselprojects.wordpress.com/?p=344</guid>
		<description></description>
		<content:encoded><![CDATA[After many failed little pet projects I finally started to work on a simple game. Tired of the failures of half-assed abstractions and poorly supported cross-platform languages I decided I could just learn C++.

I must say that after 3 months I'm really happy on the progress I've so far.
<h3>Tooling</h3>
So far, I've been bootstrapping  a simple map editor with <a href="http://www.sfml-dev.org/">SFML</a> (Graphics, Sound libraries). And <a href="https://github.com/ocornut/imgui">imgui</a> (For the Map Editor and debugging tools). I've been inspired by the simplicity of <a href="https://eliasdaler.github.io/">Elias Daler's game</a>.

Contrary to everybody else's opinion (maybe I'm surrounded by C++ haters) I'm greatly surprised by how nice is to do C++ in my evenings after work. Last time I used it (and maybe I'll sound like an old timer) memory was handled by yourself and g++ errors weren't very friendly to the beginner. Clang and C++ 11 makes everything easier! SFML is also a great example of modern C++.

I'd love to share the existing code, but is nice to be able to move fast without the feeling people will judge you for your awful hacks. (Hey! I gotta write clean code for my daily job!)

For the assets I've been using the help from The <a href="http://kenney.nl/">Asset-God</a> (as known in /r/gamedev)

Anyway... here's a small demo of the small interactions I have so far.

[embed]https://youtu.be/xobGAKZRD2g[/embed]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>344</wp:post_id>
		<wp:post_date>2017-02-01 01:30:37</wp:post_date>
		<wp:post_date_gmt>2017-02-01 01:30:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>starting-game-development-in-c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25985301]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[1370448346]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>In love with my first 3D Printer!</title>
		<link>https://twisselprojects.wordpress.com/2017/08/23/in-love-with-my-first-3d-printer/</link>
		<pubDate>Wed, 23 Aug 2017 20:21:12 +0000</pubDate>
		<dc:creator>diegoeche</dc:creator>
		<guid isPermaLink="false">https://twisselprojects.wordpress.com/?p=346</guid>
		<description></description>
		<content:encoded><![CDATA[I was a bit skeptical and fearful that I'd buy something that would beat me, and then I'd have to confess to my friends that I failed. And that's why it took me sooo long to buy a 3D printer. Now they are cheap. Like 200usd cheap. And getting cheaper and easier to build every fucking day.

So I read tutorials, blogs, youtube videos. The best the worst the ugly of chinese DIY kits and what's the best start a noob can have. Awesome internet has all the answers.

No it doesn't.
<h2>Building a 3D printer</h2>
When the package arrives, no matter how many (if any) reassurances you get from your peers. If you are not a mechanical engineer, is hard not to make any mistakes. Undo, redo... repeat. It feels like I'm describing it as a terrible thing... but actually it was super fun!

It feels like a puzzle. It makes you feel some nice fluffy feeling about Engineering. It makes you feel smart when you figure it out. And it is fucking rewarding. <em>Damn</em>, I could not emphasise that enough.

Building a 3D printer was rewarding in itself. Makes you think about all the trade-offs manufacturers have when trying to make the cheapest DIY 3D printer. And that, for me, made me discover my inner mechanical engineer child. Because when it's all build and done you can start making it awesome.
<h2>A do-it-all machine</h2>
I always thought, "ok, but if I had a 3D printer, what would I print?". I thought I would get bored and stop printing after downloading a bunch of models and getting over it. But this is the thing... It wasn't about printing the things I wanted, it was the fact that by having the possibility of making any shape with "enough" resistance rewired my brain. I mean, I'm a coder, It shapes my reality lens. And this opens so many doors to "hack" in the real sense.

I need an enclosure for ABS printing? Well, we can hack 2 IKEA tables, some 3d printed parts and Boom, an ABS enclosure.

https://www.instagram.com/p/BUowOXKhk-I/?taken-by=diegoeche

&nbsp;

&nbsp;

Cases for the orange pies

<img class="alignnone size-medium" src="https://files.slack.com/files-tmb/T11F3FA20-F6R3L9529-25e44f6bd3/pasted_image_at_2017_08_19_10_08_pm_1024.png" width="1023" height="614" />
<h2>How did I start?</h2>
I chose the Tevo Tarantula after reading some online reviews. Youtube is your friend, and almost everything is explained there. I'm not going to be nice and tell you that glass is your friend. Because people must do their own mistakes. Is great. You learn.

And to end this post. This is my baby, with enclosures, and some tacky leds.

https://www.instagram.com/p/BXOoSvjH8_7/?taken-by=diegoeche]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>346</wp:post_id>
		<wp:post_date>2017-08-23 20:21:12</wp:post_date>
		<wp:post_date_gmt>2017-08-23 20:21:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>in-love-with-my-first-3d-printer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25985301]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[8566277023]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
